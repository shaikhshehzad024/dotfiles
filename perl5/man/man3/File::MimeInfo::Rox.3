.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "File::MimeInfo::Rox 3"
.TH File::MimeInfo::Rox 3 2024-04-25 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
File::MimeInfo::Rox \- Open files by mimetype "Rox style"
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  use File::MimeInfo::Magic;
\&  use File::MimeInfo::Rox qw/:magic/;
\&
\&  # open some file with the appropriate program
\&  mime_system($somefile);
\&
\&  # more verbose version
\&  my $mt = mimetype($somefile)
\&    || die "Could not find mimetype for $somefile\en";
\&  mime_system($somefile, $mt)
\&    || die "No program to open $somefile available\en";
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module tries to mimic the behaviour of the rox file
browser <http://rox.sf.net> when "opening" data files.
It determines the mime type and searches in rox's \f(CW\*(C`Choices\*(C'\fR
directories for a program to handle that mimetype.
.PP
See the rox documentation for an extensive discussion of this
mechanism.
.SH EXPORT
.IX Header "EXPORT"
The methods \f(CW\*(C`mime_exec\*(C'\fR and \f(CW\*(C`mime_system\*(C'\fR are exported,
if you use the export tag \f(CW\*(C`:magic\*(C'\fR you get the same methods
but File::MimeInfo::Magic will be used for mimetype lookup.
.SH ENVIRONMENT
.IX Header "ENVIRONMENT"
The environment variable \f(CW\*(C`CHOICESPATH\*(C'\fR is used when searching
for rox's config dirs. It defaults to
\&\f(CW\*(C`$ENV{HOME}/Choices:/usr/local/share/Choices:/usr/share/Choices\*(C'\fR
.SH METHODS
.IX Header "METHODS"
.ie n .IP mime_system($file) 4
.el .IP \f(CWmime_system($file)\fR 4
.IX Item "mime_system($file)"
.PD 0
.ie n .IP """mime_system($file, $mimetype, @_)""" 4
.el .IP "\f(CWmime_system($file, $mimetype, @_)\fR" 4
.IX Item "mime_system($file, $mimetype, @_)"
.PD
Try to open \f(CW$file\fR with the appropriate program for files of
it's mimetype. You can use \f(CW$mimetype\fR to force the mimetype.
Also if you already know the mimetype it saves a lot of time
to just tell it.
.Sp
If either the mimetype couldn't be determined or
no appropriate program could be found \f(CW\*(C`undef\*(C'\fR is returned.
If the actual system fails an exception is raised.
.Sp
All remaining arguments are passed on to the handler.
.ie n .IP mime_exec($file) 4
.el .IP \f(CWmime_exec($file)\fR 4
.IX Item "mime_exec($file)"
.PD 0
.ie n .IP """mime_exec($file, $mimetype, @_)""" 4
.el .IP "\f(CWmime_exec($file, $mimetype, @_)\fR" 4
.IX Item "mime_exec($file, $mimetype, @_)"
.PD
Like \f(CWmime_system()\fR but uses exec instead of system,
so it \fBnever returns\fR if successful.
.ie n .IP suggest_script_name($mimetype) 4
.el .IP \f(CWsuggest_script_name($mimetype)\fR 4
.IX Item "suggest_script_name($mimetype)"
Returns the list \f(CW\*(C`($dir, $file)\*(C'\fR for the suggested place
to write new script files (or symlinks) for mimetype \f(CW$mimetype\fR.
The suggested dir doesn't need to exist.
.SH AUTHOR
.IX Header "AUTHOR"
Jaap Karssenberg <pardus@cpan.org>
Maintained by Michiel Beijen <mb@x14.nl>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 2003, 2012 Jaap G Karssenberg. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::MimeInfo,
File::MimeInfo::Magic,
<http://rox.sourceforce.net>
