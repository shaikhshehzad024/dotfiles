.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "URI::_punycode 3"
.TH URI::_punycode 3 2024-11-06 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
URI::_punycode \- encodes Unicode string in Punycode
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&  use strict;
\&  use warnings;
\&  use utf8;
\&
\&  use URI::_punycode qw(encode_punycode decode_punycode);
\&
\&  # encode a unicode string
\&  my $punycode = encode_punycode(\*(Aqhttp://☃.net\*(Aq); # http://.net\-xc8g
\&  $punycode = encode_punycode(\*(Aqbücher\*(Aq); # bcher\-kva
\&  $punycode = encode_punycode(\*(Aq他们为什么不说中文\*(Aq); # ihqwcrb4cv8a8dqg056pqjye
\&
\&  # decode a punycode string back into a unicode string
\&  my $unicode = decode_punycode(\*(Aqhttp://.net\-xc8g\*(Aq); # http://☃.net
\&  $unicode = decode_punycode(\*(Aqbcher\-kva\*(Aq); # bücher
\&  $unicode = decode_punycode(\*(Aqihqwcrb4cv8a8dqg056pqjye\*(Aq); # 他们为什么不说中文
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
URI::_punycode is a module to encode / decode Unicode strings into
Punycode <https://tools.ietf.org/html/rfc3492>, an efficient
encoding of Unicode for use with IDNA <https://tools.ietf.org/html/rfc5890>.
.SH FUNCTIONS
.IX Header "FUNCTIONS"
All functions throw exceptions on failure. You can \f(CW\*(C`catch\*(C'\fR them with
Syntax::Keyword::Try or Try::Tiny. The following functions are exported
by default.
.SS encode_punycode
.IX Subsection "encode_punycode"
.Vb 3
\&  my $punycode = encode_punycode(\*(Aqhttp://☃.net\*(Aq);  # http://.net\-xc8g
\&  $punycode = encode_punycode(\*(Aqbücher\*(Aq); # bcher\-kva
\&  $punycode = encode_punycode(\*(Aq他们为什么不说中文\*(Aq) # ihqwcrb4cv8a8dqg056pqjye
.Ve
.PP
Takes a Unicode string (UTF8\-flagged variable) and returns a Punycode
encoding for it.
.SS decode_punycode
.IX Subsection "decode_punycode"
.Vb 3
\&  my $unicode = decode_punycode(\*(Aqhttp://.net\-xc8g\*(Aq); # http://☃.net
\&  $unicode = decode_punycode(\*(Aqbcher\-kva\*(Aq); # bücher
\&  $unicode = decode_punycode(\*(Aqihqwcrb4cv8a8dqg056pqjye\*(Aq); # 他们为什么不说中文
.Ve
.PP
Takes a Punycode encoding and returns original Unicode string.
.SH AUTHOR
.IX Header "AUTHOR"
Tatsuhiko Miyagawa <\fImiyagawa@bulknews.net\fR> is the author of
IDNA::Punycode which was the basis for this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IDNA::Punycode, RFC 3492 <https://tools.ietf.org/html/rfc3492>,
RFC 5891 <https://tools.ietf.org/html/rfc5891>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
