.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "File::MimeInfo 3"
.TH File::MimeInfo 3 2024-04-25 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
File::MimeInfo \- Determine file type from the file name
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&  use File::MimeInfo;
\&  my $mime_type = mimetype($file);
\&  my $mime_type2 = mimetype(\*(Aqtest.png\*(Aq);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module can be used to determine the mime type of a file. It
tries to implement the freedesktop specification for a shared
MIME database.
.PP
For this module shared-mime-info-spec 0.13 was used.
.PP
This package only uses the globs file. No real magic checking is
used. The File::MimeInfo::Magic package is provided for magic typing.
.PP
If you want to determine the mimetype of data in a memory buffer you should
use File::MimeInfo::Magic in combination with IO::Scalar.
.PP
This module loads the various data files when needed. If you want to
hash data earlier see the \f(CW\*(C`rehash\*(C'\fR methods below.
.SH EXPORT
.IX Header "EXPORT"
The method \f(CW\*(C`mimetype\*(C'\fR is exported by default.
The methods \f(CW\*(C`inodetype\*(C'\fR, \f(CW\*(C`globs\*(C'\fR, \f(CW\*(C`extensions\*(C'\fR, \f(CW\*(C`describe\*(C'\fR,
\&\f(CW\*(C`mimetype_canon\*(C'\fR and \f(CW\*(C`mimetype_isa\*(C'\fR can be exported on demand.
.SH METHODS
.IX Header "METHODS"
.ie n .IP new() 4
.el .IP \f(CWnew()\fR 4
.IX Item "new()"
Simple constructor to allow Object Oriented use of this module.
If you want to use this, include the package as \f(CW\*(C`use File::MimeInfo ();\*(C'\fR
to avoid importing sub \f(CWmimetype()\fR.
.ie n .IP mimetype($file) 4
.el .IP \f(CWmimetype($file)\fR 4
.IX Item "mimetype($file)"
Returns a mimetype string for \f(CW$file\fR, returns undef on failure.
.Sp
This method bundles \f(CW\*(C`inodetype\*(C'\fR and \f(CW\*(C`globs\*(C'\fR.
.Sp
If these methods are unsuccessful the file is read and the mimetype defaults
to 'text/plain' or to 'application/octet\-stream' when the first ten chars
of the file match ascii control chars (white spaces excluded).
If the file doesn't exist or isn't readable \f(CW\*(C`undef\*(C'\fR is returned.
.ie n .IP inodetype($file) 4
.el .IP \f(CWinodetype($file)\fR 4
.IX Item "inodetype($file)"
Returns a mimetype in the 'inode' namespace or undef when the file is
actually a normal file.
.ie n .IP globs($file) 4
.el .IP \f(CWglobs($file)\fR 4
.IX Item "globs($file)"
Returns a mimetype string for \f(CW$file\fR based on the filename and filename extensions.
Returns undef on failure. The file doesn't need to exist.
.Sp
Behaviour in list context (wantarray) is unspecified and will change in future
releases.
.ie n .IP default($file) 4
.el .IP \f(CWdefault($file)\fR 4
.IX Item "default($file)"
This method decides whether a file is binary or plain text by looking at
the first few bytes in the file. Used to decide between "text/plain" and
"application/octet\-stream" if all other methods have failed.
.Sp
The spec states that we should check for the ascii control chars and let
higher bit chars pass to allow utf8. We try to be more intelligent using
perl utf8 support.
.ie n .IP extensions($mimetype) 4
.el .IP \f(CWextensions($mimetype)\fR 4
.IX Item "extensions($mimetype)"
In list context, returns the list of filename extensions that map to the given mimetype.
In scalar context, returns the first extension that is found in the database
for this mimetype.
.ie n .IP """describe($mimetype, $lang)""" 4
.el .IP "\f(CWdescribe($mimetype, $lang)\fR" 4
.IX Item "describe($mimetype, $lang)"
Returns a description of this mimetype as supplied by the mime info database.
You can specify a language with the optional parameter \f(CW$lang\fR, this should be
the two letter language code used in the xml files. Also you can set the global
variable \f(CW$File::MimeInfo::LANG\fR to specify a language.
.Sp
This method returns undef when no xml file was found (i.e. the mimetype
doesn't exist in the database). It returns an empty string when the xml file doesn't
contain a description in the language you specified.
.Sp
\&\fICurrently no real xml parsing is done, it trusts the xml files are nicely formatted.\fR
.ie n .IP mimetype_canon($mimetype) 4
.el .IP \f(CWmimetype_canon($mimetype)\fR 4
.IX Item "mimetype_canon($mimetype)"
Returns the canonical mimetype for a given mimetype.
Deprecated mimetypes are typically aliased to their canonical variants.
This method only checks aliases, doesn't check whether the mimetype
exists.
.Sp
Use this method as a filter when you take a mimetype as input.
.ie n .IP mimetype_isa($mimetype) 4
.el .IP \f(CWmimetype_isa($mimetype)\fR 4
.IX Item "mimetype_isa($mimetype)"
.PD 0
.ie n .IP """mimetype_isa($mimetype, $mimetype)""" 4
.el .IP "\f(CWmimetype_isa($mimetype, $mimetype)\fR" 4
.IX Item "mimetype_isa($mimetype, $mimetype)"
.PD
When give only one argument this method returns a list with mimetypes that are parent
classes for this mimetype.
.Sp
When given two arguments returns true if the second mimetype is a parent class of
the first one.
.Sp
This method checks the subclasses table and applies a few rules for implicit
subclasses.
.ie n .IP has_mimeinfo_database() 4
.el .IP \f(CWhas_mimeinfo_database()\fR 4
.IX Item "has_mimeinfo_database()"
Check if there are mimeinfo database files available; returns 1 on success.
If you don't have the shared-mime-info package installed or not in the PATH or
\&\f(CW@File::MimeInfo::DIRS\fR does not contain database directories, you will not get
the successful reply.
.Sp
New in version 0.30.
.ie n .IP rehash() 4
.el .IP \f(CWrehash()\fR 4
.IX Item "rehash()"
Rehash the data files. Glob information is preparsed when this method is called.
.Sp
If you want to by-pass the XDG basedir system you can specify your database
directories by setting \f(CW@File::MimeInfo::DIRS\fR. But normally it is better to
change the XDG basedir environment variables.
.ie n .IP rehash_aliases() 4
.el .IP \f(CWrehash_aliases()\fR 4
.IX Item "rehash_aliases()"
Rehashes the \fImime/aliases\fR files.
.ie n .IP rehash_subclasses() 4
.el .IP \f(CWrehash_subclasses()\fR 4
.IX Item "rehash_subclasses()"
Rehashes the \fImime/subclasses\fR files.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
This module throws an exception when it can't find any data files, when it can't
open a data file it found for reading or when a subroutine doesn't get enough arguments.
In the first case you either don't have the freedesktop mime info database installed,
or your environment variables point to the wrong places,
in the second case you have the database installed, but it is broken
(the mime info database should logically be world readable).
.SH TODO
.IX Header "TODO"
Make an option for using some caching mechanism to reduce init time.
.PP
Make \f(CWdescribe()\fR use real xml parsing ?
.SH LIMITATIONS
.IX Header "LIMITATIONS"
Perl versions prior to 5.8.0 do not have the ':utf8' IO Layer, thus
for the default method and for reading the xml files
utf8 is not supported for these versions.
.PP
Since it is not possible to distinguish between encoding types (utf8, latin1, latin2 etc.)
in a straightforward manner only utf8 is supported (because the spec recommends this).
.PP
This module does not yet check extended attributes for a mimetype.
Patches for this are very welcome.
.PP
This module uses the FreeDesktop.org shared mime info database. On your desktop
linux this is typically pre-installed so it's not a problem. On your server
you can install the shared-mime-info package via apt or dnf or apk or whatnot.
.PP
To install on macOS, you can install it like this:
.PP
.Vb 1
\&    brew install shared\-mime\-info
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
Jaap Karssenberg <pardus@cpan.org>
Maintained by Michiel Beijen <mb@x14.nl>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 2003, 2012 Jaap G Karssenberg. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::BaseDir,
File::MimeInfo::Magic,
File::MimeInfo::Applications,
File::MimeInfo::Rox
.IP "related CPAN modules" 4
.IX Item "related CPAN modules"
File::MMagic
.IP "freedesktop specifications used" 4
.IX Item "freedesktop specifications used"
<http://www.freedesktop.org/wiki/Specifications/shared\-mime\-info\-spec>,
<http://www.freedesktop.org/wiki/Specifications/basedir\-spec>,
<http://www.freedesktop.org/wiki/Specifications/desktop\-entry\-spec>
.IP "freedesktop mime database" 4
.IX Item "freedesktop mime database"
<http://www.freedesktop.org/wiki/Software/shared\-mime\-info>
